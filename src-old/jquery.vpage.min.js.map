{"version":3,"sources":["jquery.vpage.js"],"names":["$","url_get_onload_key","version","vpage","storage","is_listen","api","this","is_set_listen","console","log","check_param","param","extend","undefined","url","name","event","onload","onpop","err","auto_set_url","usethis","get","tagName","href","attr","set","add_state","state","vpage_name","get_url_param","st","call","window","onpopstate","history","key","each","vname","data","obj","push_state","is_replace","pushdata","newext","replaceState","title","pushState","hash","vars","hashes","location","slice","indexOf","split","i","length","listen","trigger","type","val","fn","$parent","parent","child","on","prepare","jQuery"],"mappings":";CAAC,SAAWA,GAER,GAGIC,GAHAC,EAAU,OAKdF,GAAEG,SAGFH,EAAEG,MAAMC,WAGRJ,EAAEG,MAAME,WAAY,EAEpBL,EAAEG,MAAMG,IAAM,GAAI,YAGdC,KAAKC,cAAgB,WACjB,MAAIR,GAAEG,MAAME,aAAc,GACtBI,QAAQC,IAAI,yBACL,IAEJ,GAIXH,KAAKI,YAAc,SAAUC,GACzB,IAQI,GALAA,EAAQZ,EAAEa,QACNZ,mBAAoB,UACrBW,GAGeE,SAAdF,EAAMG,IAAmB,KAAM,kBAC9B,IAAmBD,SAAfF,EAAMI,KAAoB,KAAM,kBACpC,IAAoBF,SAAhBF,EAAMK,MAAqB,KAAM,mBACrC,IAAiBH,SAAbF,EAAAA,MAAwB,KAAM,gBAClC,IAAqBE,SAAjBF,EAAMM,OAAsB,KAAM,oBACtC,IAAoBJ,SAAhBF,EAAMO,MAAqB,KAAM,mBAM1C,OAJAlB,GAAqBW,EAAMX,mBAIpBW,EAET,MAAOQ,GAEL,MADAX,SAAQC,IAAI,UAAYU,IACjB,IAKfb,KAAKc,aAAe,SAAUC,EAASN,GACnC,GAAiC,KAA7BhB,EAAEsB,GAASC,IAAI,GAAGC,QAAgB,OAAO,CAC7C,IAAIC,GAAOzB,EAAEsB,GAASI,KAAK,OAG3B,OADA1B,GAAEG,MAAMwB,IAAIX,EAAM,MAAOS,GAClBA,GAIXlB,KAAKqB,UAAY,SAAUhB,GAGvB,MAFKA,GAAMiB,QAAOjB,EAAMiB,UACxBjB,EAAMiB,MAAMC,WAAalB,EAAMI,KACxBJ,EAAMiB,OAUjBtB,KAAKW,OAAS,WAGV,GAAIY,GAAa9B,EAAEG,MAAM4B,cAAc9B,EAEvC,IAAI6B,GAGI9B,EAAEG,MAAMC,QAAQ0B,GAAa,CAC7B,GAAIE,GAAKhC,EAAEG,MAAMC,QAAQ0B,EACzBE,GAAGd,OAAOe,KAAKD,GAIvB,MAAOhC,GAAEG,MAAMG,KAMnBC,KAAKY,MAAQ,WAkCT,MAhCAe,QAAOC,WAAc,SAAUlB,GAG3B,GAAImB,QAAQP,MAAM,CAId,GAAIQ,IAAM,CAUV,IAPArC,EAAEsC,KAAKtC,EAAEG,MAAMC,QAAS,SAAUmC,EAAOC,GAGrC,MAFAH,GAAMrC,EAAEG,MAAM4B,cAAcS,EAAKvC,oBAE7BoC,GAAY,EAAhB,SAIAA,EAAK,CACL,GAAII,GAAMzC,EAAEG,MAAMC,QAAQiC,EAC1BI,GAAItB,MAAMc,KAAKQ,OAGfzC,GAAEG,MAAFH,iBAMJA,GAAEG,MAAFH,cAIDA,EAAEG,MAAMG,KAInBC,KAAKmC,WAAa,SAAU9B,EAAO+B,GAC/B,GACIC,IADMhC,EAAMI,QAOhB,IAJAJ,EAAMiB,MAAQ7B,EAAEG,MAAMG,IAAIsB,UAAUhB,GACpCgC,EAAShC,EAAMI,MAAQJ,EAAMiB,MAGzBO,QAAQP,MACR,GAAIgB,GAAS7C,EAAEa,OAAOuB,QAAQP,MAAOe,OAKrC,IAAIC,GAASD,CAGbD,MAAe,EACfP,QAAQU,aAAaD,EAAQjC,EAAMmC,MAAOnC,EAAMG,KAEhDqB,QAAQY,UAAUH,EAAQjC,EAAMmC,MAAOnC,EAAMG,OAMzDf,EAAEG,MAAMD,QAAU,WACd,MAAOA,IAIXF,EAAEG,MAAM4B,cAAgB,SAAUM,GAG9B,IAAI,GAFWY,GAAXC,KACAC,EAASjB,OAAOkB,SAAS3B,KAAK4B,MAAMnB,OAAOkB,SAAS3B,KAAK6B,QAAQ,KAAO,GAAGC,MAAM,KAC7EC,EAAI,EAAGA,EAAIL,EAAOM,OAAQD,IAE/BP,EAAOE,EAAOK,GAAGD,MAAM,KACvBL,EAAKD,EAAK,IAAMA,EAAK,EAExB,OAAQZ,GAAaa,EAAKb,GAAZa,GAOlBlD,EAAEG,MAAMuD,OAAS,WACb1D,EAAEG,MAAME,WAAY,EACpBL,EAAEG,MAAMG,IAAIY,OAAOe,OACnBjC,EAAEG,MAAMG,IAAIa,MAAMc,QAQtBjC,EAAEG,MAAMwD,QAAU,SAAU3C,EAAM4C,GAC9B,GAAI5B,GAAKhC,EAAEG,MAAMC,QAAQY,EACb,WAAR4C,EACA5B,EAAGd,OAAOe,KAAKD,GAEF,SAAR4B,GACL5B,EAAGb,MAAMc,KAAKD,IAUtBhC,EAAEG,MAAMwB,IAAM,SAAUX,EAAMqB,EAAKwB,GAC/B,GAAIzD,GAAUJ,EAAEG,MAAMC,QAAQY,EAC9B,OAAKZ,QAILJ,EAAEG,MAAMC,QAAQY,GAAMqB,GAAOwB,IAHzBpD,QAAQC,IAAI,kBAAoBM,IACzB,IAUfhB,EAAEG,MAAMoB,IAAM,SAAUP,EAAMqB,GAE1B,IAAKrB,EAAM,MAAOhB,GAAEG,MAAMC,OAE1B,KAAKiC,EAAK,CAGN,GAAIjC,GAAUJ,EAAEG,MAAMC,QAAQY,EAC9B,OAAKZ,GAKEJ,EAAEG,MAAMC,QAAQY,IAJZ,EAOf,MAAOhB,GAAEG,MAAMC,QAAQY,GAAMqB,IAIjCrC,EAAEG,MAAFH,WAAkB,aAkBlBA,EAAE8D,GAAG3D,MAAQ,SAAUS,GAGnBA,EAAQZ,EAAEG,MAAMG,IAAIK,YAAYC,GAGhCZ,EAAEG,MAAMC,QAAQQ,EAAMI,MAAQJ,EAyBzBwB,QAAQP,MAMHO,QAAQP,MAAMjB,EAAMI,OAE1BhB,EAAEG,MAAMG,IAAIoC,WAAW9B,GAAO,GAN9BZ,EAAEG,MAAMG,IAAIoC,WAAW9B,GAAO,EAYlC,IAAImD,GAA2BjD,SAAjBF,EAAMoD,OAAuBzD,KAAOP,EAAEY,EAAMoD,QACtDC,EAAwBnD,SAAhBF,EAAMqD,OAAsB,EAAQrD,EAAMqD,KAGtDF,GAAQG,GAAGtD,EAAMK,MAAOgD,EAAO,WAG3B,MAAIjE,GAAEG,MAAMG,IAAIE,mBAAoB,GAAc,GAGlDR,EAAEG,MAAMG,IAAIe,aAAad,KAAMK,EAAMI,MAGjCJ,EAAMuD,SAASvD,EAAMuD,QAAQlC,KAAK1B,KAAMK,GAG5CZ,EAAEG,MAAMG,IAAIoC,WAAW9B,GAInBA,EAAAA,MAAiBA,EAAAA,MAASqB,KAAK1B,KAAMK,GAAzC,YAMTwD","file":"jquery.vpage.min.js","sourcesContent":["(function ( $ ) {\r\n\r\n    var version = \"1.2.3\";\r\n\r\n    // 提供 onload 辨識的鍵，預設 onload \r\n    var url_get_onload_key;\r\n\r\n    $.vpage = {};\r\n\r\n    // 倉儲存放\r\n    $.vpage.storage = {}\r\n\r\n    // 是否已經設置監聽\r\n    $.vpage.is_listen = false;\r\n\r\n    $.vpage.api = new function (){\r\n\r\n        // 設定監聽了？\r\n        this.is_set_listen = function (){\r\n            if ($.vpage.is_listen === false) {\r\n                console.log('vpage 還未設定 listen() ');\r\n                return false;\r\n            }\r\n            return true;\r\n        }\r\n\r\n        // 確認參數的合法性\r\n        this.check_param = function (param){\r\n            try {\r\n\r\n                // 預設參數\r\n                param = $.extend({\r\n                    url_get_onload_key: 'onload'\r\n                }, param);\r\n\r\n                // 禁止輸入 url \r\n                if (param.url !== undefined) throw '請勿指定參數 param.url';\r\n                else if (param.name === undefined) throw '請指定參數 param.name';\r\n                else if (param.event === undefined) throw '請指定參數 param.event';\r\n                else if (param.do === undefined) throw '請指定參數 param.do';\r\n                else if (param.onload === undefined) throw '請指定參數 param.onload';\r\n                else if (param.onpop === undefined) throw '請指定參數 param.onpop';\r\n\r\n                url_get_onload_key = param.url_get_onload_key;\r\n\r\n                // console.log(param)\r\n\r\n                return param;\r\n\r\n            } catch (err){\r\n                console.log('Error: ' + err);\r\n                return false;\r\n            }\r\n        }\r\n\r\n        // 如果是標籤 a 就自動設定網址\r\n        this.auto_set_url = function (usethis, name){\r\n            if ($(usethis).get(0).tagName != \"A\") return false;\r\n            var href = $(usethis).attr(\"href\");\r\n\r\n            $.vpage.set(name, \"url\", href);\r\n            return href;\r\n        }\r\n\r\n        // 添加新的辨識\r\n        this.add_state = function (param){\r\n            if (!param.state) param.state = {};\r\n            param.state.vpage_name = param.name;\r\n            return param.state;\r\n        }\r\n\r\n        \r\n\r\n        /**\r\n         * 畫面進入時所觸發的事件\r\n         * 若要被觸發這個事件，網址需要夾帶有 GET 參數鍵 url_get_onload_key ，值需要指定 vpage 的 name 參數。\r\n         * 例如 http://domain.com?onload=my_button\r\n         */\r\n        this.onload = function (){\r\n\r\n            // 取得 GET 的 onload 值，作為辨識的鍵\r\n            var vpage_name = $.vpage.get_url_param(url_get_onload_key);\r\n\r\n            if (vpage_name) {\r\n\r\n                //呼叫對應的 onload()\r\n                if ($.vpage.storage[vpage_name]) {\r\n                    var st = $.vpage.storage[vpage_name];\r\n                    st.onload.call(st);\r\n                }\r\n            }\r\n\r\n            return $.vpage.api;\r\n        }\r\n\r\n        /**\r\n         * 切換上下頁面所觸發的事件\r\n         */\r\n        this.onpop = function (){\r\n\r\n            window.onpopstate  = function (event){\r\n\r\n                //如果有放入堆疊的話才執行\r\n                if (history.state){\r\n                    // console.log(history.state)\r\n\r\n\r\n                    var key = false;\r\n\r\n                    // 從倉儲中搜尋。如果發現網址有，代表必須觸發\r\n                    $.each($.vpage.storage, function (vname, data){\r\n                        key = $.vpage.get_url_param(data.url_get_onload_key);\r\n\r\n                        if (key) return false;\r\n                    })\r\n\r\n\r\n                    if (key) {\r\n                        var obj = $.vpage.storage[key];\r\n                        obj.onpop.call(obj);\r\n                    }\r\n                    else {\r\n                        $.vpage.default();\r\n                    }\r\n\r\n                }\r\n                else {\r\n                    // 最初始\r\n                    $.vpage.default();\r\n                }\r\n                \r\n            }\r\n            return $.vpage.api;\r\n        }\r\n\r\n        // 將參數放置到 history.state 紀錄\r\n        this.push_state = function (param, is_replace){\r\n            var vpn = param.name;\r\n            var pushdata = {};\r\n\r\n            param.state = $.vpage.api.add_state(param);\r\n            pushdata[param.name] = param.state;\r\n\r\n            // 合併\r\n            if (history.state) {\r\n                var newext = $.extend(history.state, pushdata);\r\n                // console.log(newext)\r\n                // alert(\"目前是 \" + param.name + \"需要與已存在的合併\")\r\n            }\r\n            else {\r\n                var newext = pushdata;\r\n            }\r\n\r\n            if (is_replace === true)\r\n                history.replaceState(newext, param.title, param.url);\r\n            else\r\n                history.pushState(newext, param.title, param.url);\r\n        }\r\n\r\n    }\r\n\r\n    // 版本\r\n    $.vpage.version = function (){\r\n        return version;\r\n    }\r\n\r\n    // 取得網址的 get 參數，例如 ?\r\n    $.vpage.get_url_param = function (key){\r\n        var vars = {}, hash;\r\n        var hashes = window.location.href.slice(window.location.href.indexOf('?') + 1).split('&');\r\n        for(var i = 0; i < hashes.length; i++)\r\n        {\r\n           hash = hashes[i].split('=');\r\n           vars[hash[0]] = hash[1];\r\n        }\r\n        return !key ? vars : vars[key];\r\n    }\r\n\r\n    /**\r\n     * 監聽 vpage 設定的 onload 與 onpop 事件，\r\n     * 須要放置在所有的 vpage 最後。\r\n     */\r\n    $.vpage.listen = function(){\r\n        $.vpage.is_listen = true;\r\n        $.vpage.api.onload.call();\r\n        $.vpage.api.onpop.call();\r\n    }\r\n\r\n    /**\r\n     * 由外部手動觸發\r\n     * @param   name         vpage 的名稱\r\n     * @param   type         onload | onpop\r\n     */\r\n    $.vpage.trigger = function (name, type){\r\n        var st = $.vpage.storage[name];\r\n        if (type == \"onload\"){\r\n            st.onload.call(st);\r\n        }\r\n        else if (type == \"onpop\") {\r\n            st.onpop.call(st);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 設定參數\r\n     * @param  name     vpage 的名稱\r\n     * @param  key      參數的鍵\r\n     * @param  val      參數的值\r\n     */\r\n    $.vpage.set = function (name, key, val){\r\n        var storage = $.vpage.storage[name];\r\n        if (!storage) {\r\n            console.log('找不到指定的 vpage = ' + name);\r\n            return false;\r\n        }\r\n        $.vpage.storage[name][key] = val;\r\n    }\r\n\r\n    /**\r\n     * 取得參數\r\n     * @param  name     (選)vpage 的名稱，不指定返回全部\r\n     * @param  key      (選)參數的鍵，不指定返回全部\r\n     */\r\n    $.vpage.get = function (name, key){\r\n\r\n        if (!name) return $.vpage.storage;\r\n\r\n        if (!key) {\r\n\r\n            // 找不到 vpage\r\n            var storage = $.vpage.storage[name];\r\n            if (!storage) {\r\n                return false;\r\n            }\r\n\r\n            // 返回所有參數\r\n            return $.vpage.storage[name];\r\n        }\r\n\r\n        return $.vpage.storage[name][key];\r\n    }\r\n\r\n    // 總體預設方法，也就是當點選上一頁回到最初狀態時會觸發\r\n    $.vpage.default = function (){}\r\n\r\n\r\n    /**\r\n     * [vpage description]\r\n     * @param  param.name                      為該模型命名\r\n     * @param  param.event                     on 的事件\r\n     * @param  param.do(param)                 觸發時的動作\r\n     * @param  param.onload                    畫面進入時所觸發的事件\r\n     * @param  param.onpop                     切換上下頁面所觸發的事件\r\n     * @param  param.parent                    (選)on 的父元素, param.parent 與 param.child 同時使用，等於取代選擇器使用\r\n     * @param  param.child                     (選)on 的子元素, param.parent 與 param.child 同時使用，等於取代選擇器使用\r\n     * @param  param.state                     (選)history.pushState 物件     \r\n     * @param  param.prepare(param)            (選)觸發事件前的準備動作\r\n     * @param  param.title                     (選)變更的網頁標題\r\n     * @param  url_get_onload_key              (選)觸發 onpop 的鍵，預設 onload\r\n     * @param  param.url                       private 網址不可由外部參數指定。需要透過 $.vpage.set()\r\n     */\r\n    $.fn.vpage = function (param){\r\n\r\n        // 檢查並取得\r\n        param = $.vpage.api.check_param(param);\r\n\r\n        // 將設定放到倉儲，使用 vpage 的名稱作為鍵\r\n        $.vpage.storage[param.name] = param;\r\n\r\n        /**\r\n         * 注意！\r\n         * 因為 history.state 會連動，所以當順序是\r\n         * \r\n         * console.log(history.state)\r\n         * history.state = ...\r\n         *\r\n         * 雖然檢測 console.log() 排序在修改 history.state 之前，但是當\r\n         * 使用瀏覽器的 Console 開啟時，console.log() 出來的 history.state \r\n         * 其實已經被修改過了。\r\n         * 在 else if 的地方可以修改為以下片段來檢測：\r\n\r\n            else if (!history.state[param.name]) {\r\n                console.log(\"2: start\", history.state) // 檢測時先打開\r\n                console.log(\"2: start\", history.state) // 等 setTimeout 觸發後再打開，會發現 history.state 連動過了\r\n\r\n                setTimeout(function (){\r\n                    $.vpage.api.push_state(param, true);\r\n                    console.log(\"2: end\", history.state)\r\n                }, 3000)\r\n            }\r\n         */\r\n        // 第一個 vpage 建立，就先將參數放置到 history.state 紀錄\r\n        if (!history.state) {\r\n            // console.log(\"1: start\", history.state)\r\n            $.vpage.api.push_state(param, true);\r\n            // console.log(\"1: end\", history.state)\r\n        }\r\n        // 若有第二個 vpage 建立，就追加到 state\r\n        else if (!history.state[param.name]) {\r\n            // console.log(\"2: start\", history.state) \r\n            $.vpage.api.push_state(param, true);\r\n            // console.log(\"2: end\", history.state)\r\n        }\r\n\r\n\r\n\r\n        var $parent = param.parent === undefined ? this : $(param.parent);\r\n        var child = param.child === undefined ? false : param.child;\r\n\r\n        // 綁定使用者指派的事件\r\n        $parent.on(param.event, child, function (){\r\n\r\n            // 設定監聽了？\r\n            if ($.vpage.api.is_set_listen() === false) return false;\r\n\r\n            // 判斷自動設定網址\r\n            $.vpage.api.auto_set_url(this, param.name);\r\n\r\n            // 準備動作\r\n            if (param.prepare) param.prepare.call(this, param);\r\n\r\n            // 因為會被動態修改參數，所以要再次覆蓋\r\n            $.vpage.api.push_state(param);\r\n\r\n\r\n            // 觸發動作\r\n            if (param.do) return param.do.call(this, param);\r\n        })\r\n\r\n    }\r\n\r\n\r\n}( jQuery ));\r\n"]}